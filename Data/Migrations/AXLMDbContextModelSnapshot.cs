// <auto-generated />
using System;
using Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AXLMDbContext))]
    partial class AXLMDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsOverTime")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Assignment");

                    b.HasIndex(new[] { "ClassId" }, "ClassId");

                    b.HasIndex(new[] { "CreatedBy" }, "CreatedBy");

                    b.HasIndex(new[] { "ModuleId" }, "ModuleId");

                    b.HasIndex(new[] { "UpdatedBy" }, "UpdatedBy");

                    b.ToTable("Assignment", (string)null);
                });

            modelBuilder.Entity("Data.Entities.AssignmentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("AttachmentURL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("PK_AssignmentDetail");

                    b.HasIndex(new[] { "AssignmentId" }, "AssignmentId");

                    b.ToTable("AssignmentDetails");
                });

            modelBuilder.Entity("Data.Entities.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DueTo")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LateTo")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("PK_Attendance");

                    b.HasIndex(new[] { "ClassId" }, "ClassId");

                    b.ToTable("Attendance", (string)null);
                });

            modelBuilder.Entity("Data.Entities.AttendanceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_AttendanceDetail");

                    b.HasIndex(new[] { "AttendanceId" }, "AttendanceId");

                    b.HasIndex(new[] { "StudentId" }, "StudentId");

                    b.ToTable("AttendanceDetails");
                });

            modelBuilder.Entity("Data.Entities.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificateAttachment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Certificate");

                    b.HasIndex(new[] { "ProgramId" }, "ProgramId");

                    b.HasIndex(new[] { "StudentId" }, "StudentId");

                    b.ToTable("Certificate", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Class");

                    b.HasIndex(new[] { "ProgramId" }, "ProgramId");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("Data.Entities.ClassManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_ClassManager");

                    b.HasIndex(new[] { "ClassId" }, "ClassId");

                    b.HasIndex(new[] { "UserId" }, "UserId");

                    b.ToTable("Class_Manager", (string)null);
                });

            modelBuilder.Entity("Data.Entities.ClassTrainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_ClassTrainer");

                    b.HasIndex(new[] { "ClassId" }, "ClassId");

                    b.HasIndex(new[] { "UserId" }, "UserId");

                    b.ToTable("Class_Trainer", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("LectureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Document");

                    b.HasIndex(new[] { "CreatedBy" }, "CreatedBy");

                    b.HasIndex(new[] { "LectureId" }, "LectureId");

                    b.HasIndex(new[] { "UpdatedBy" }, "UpdatedBy");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Data.Entities.EmailRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Attachment")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4028)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_EmailRequest");

                    b.HasIndex(new[] { "CreatedBy" }, "CreatedBy");

                    b.HasIndex(new[] { "RecipientId" }, "RecipientId");

                    b.ToTable("Email_Request", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Lecture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Lecture");

                    b.HasIndex(new[] { "ClassId" }, "ClassId");

                    b.HasIndex(new[] { "CreatedBy" }, "CreatedBy");

                    b.HasIndex(new[] { "ModuleId" }, "ModuleId");

                    b.HasIndex(new[] { "UpdatedBy" }, "UpdatedBy");

                    b.ToTable("Lecture", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Module");

                    b.HasIndex(new[] { "CreatedBy" }, "CreatedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "UpdatedBy");

                    b.ToTable("Module", (string)null);
                });

            modelBuilder.Entity("Data.Entities.ModuleProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("PK_ModuleProgram");

                    b.HasIndex(new[] { "ModuleId" }, "ModuleId");

                    b.HasIndex(new[] { "ProgramId" }, "ProgramId");

                    b.ToTable("Module_Program", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Attachment")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_Notification");

                    b.HasIndex(new[] { "CreatedBy" }, "CreatedBy");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Data.Entities.OtpVerify", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_OtpVerify");

                    b.HasIndex(new[] { "UserId" }, "UserId");

                    b.ToTable("OTPVerify", (string)null);
                });

            modelBuilder.Entity("Data.Entities.RequestReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReplyContent")
                        .IsRequired()
                        .HasMaxLength(4028)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("PK_RequestReply");

                    b.HasIndex(new[] { "CreatedBy" }, "CreatedBy");

                    b.HasIndex(new[] { "RequestId" }, "RequestId");

                    b.ToTable("Request_Reply", (string)null);
                });

            modelBuilder.Entity("Data.Entities.StudentClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_StudentClass");

                    b.HasIndex(new[] { "ClassId" }, "ClassId");

                    b.HasIndex(new[] { "StudentId" }, "StudentId");

                    b.ToTable("Student_Class", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("AttachmentURL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsGrade")
                        .HasColumnType("bit");

                    b.Property<decimal>("Score")
                        .HasPrecision(5)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Submission");

                    b.HasIndex(new[] { "AssignmentId" }, "AssignmentId");

                    b.HasIndex(new[] { "StudentId" }, "StudentId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Data.Entities.TrainingProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_TrainingProgram");

                    b.HasIndex(new[] { "CreatedBy" }, "CreatedBy");

                    b.HasIndex(new[] { "UpdatedBy" }, "UpdatedBy");

                    b.ToTable("Training_Program", (string)null);
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varbinary(512)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varbinary(512)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Assignment", b =>
                {
                    b.HasOne("Data.Entities.Class", "Class")
                        .WithMany("Assignments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Assignment_ibfk_4");

                    b.HasOne("Data.Entities.User", "CreatedByNavigation")
                        .WithMany("AssignmentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Assignment_ibfk_1");

                    b.HasOne("Data.Entities.Module", "Module")
                        .WithMany("Assignments")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Assignment_ibfk_3");

                    b.HasOne("Data.Entities.User", "UpdatedByNavigation")
                        .WithMany("AssignmentUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Assignment_ibfk_2");

                    b.Navigation("Class");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Module");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Data.Entities.AssignmentDetail", b =>
                {
                    b.HasOne("Data.Entities.Assignment", "Assignment")
                        .WithMany("AssignmentDetails")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("AssignmentDetails_ibfk_1");

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Data.Entities.Attendance", b =>
                {
                    b.HasOne("Data.Entities.Class", "Class")
                        .WithMany("Attendances")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Attendance_ibfk_1");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Data.Entities.AttendanceDetail", b =>
                {
                    b.HasOne("Data.Entities.Attendance", "Attendance")
                        .WithMany("AttendanceDetails")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("AttendanceDetails_ibfk_1");

                    b.HasOne("Data.Entities.User", "Student")
                        .WithMany("AttendanceDetails")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("AttendanceDetails_ibfk_2");

                    b.Navigation("Attendance");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Data.Entities.Certificate", b =>
                {
                    b.HasOne("Data.Entities.TrainingProgram", "Program")
                        .WithMany("Certificates")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Certificate_ibfk_2");

                    b.HasOne("Data.Entities.User", "Student")
                        .WithMany("Certificates")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Certificate_ibfk_1");

                    b.Navigation("Program");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Data.Entities.Class", b =>
                {
                    b.HasOne("Data.Entities.TrainingProgram", "Program")
                        .WithMany("Classes")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Class_ibfk_1");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Data.Entities.ClassManager", b =>
                {
                    b.HasOne("Data.Entities.Class", "Class")
                        .WithMany("ClassManagers")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Class_Manager_ibfk_1");

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("ClassManagers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Class_Manager_ibfk_2");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.ClassTrainer", b =>
                {
                    b.HasOne("Data.Entities.Class", "Class")
                        .WithMany("ClassTrainers")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Class_Trainer_ibfk_1");

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("ClassTrainers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Class_Trainer_ibfk_2");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Document", b =>
                {
                    b.HasOne("Data.Entities.User", "CreatedByNavigation")
                        .WithMany("DocumentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Documents_ibfk_1");

                    b.HasOne("Data.Entities.Lecture", "Lecture")
                        .WithMany("Documents")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Documents_ibfk_3");

                    b.HasOne("Data.Entities.User", "UpdatedByNavigation")
                        .WithMany("DocumentUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Documents_ibfk_2");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Lecture");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Data.Entities.EmailRequest", b =>
                {
                    b.HasOne("Data.Entities.User", "CreatedByNavigation")
                        .WithMany("EmailRequestCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Email_Request_ibfk_1");

                    b.HasOne("Data.Entities.User", "Recipient")
                        .WithMany("EmailRequestRecipients")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Email_Request_ibfk_2");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Data.Entities.Lecture", b =>
                {
                    b.HasOne("Data.Entities.Class", "Class")
                        .WithMany("Lectures")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Lecture_ibfk_2");

                    b.HasOne("Data.Entities.User", "CreatedByNavigation")
                        .WithMany("LectureCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Lecture_ibfk_3");

                    b.HasOne("Data.Entities.Module", "Module")
                        .WithMany("Lectures")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Lecture_ibfk_1");

                    b.HasOne("Data.Entities.User", "UpdatedByNavigation")
                        .WithMany("LectureUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Lecture_ibfk_4");

                    b.Navigation("Class");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Module");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Data.Entities.Module", b =>
                {
                    b.HasOne("Data.Entities.User", "CreatedByNavigation")
                        .WithMany("ModuleCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Module_ibfk_2");

                    b.HasOne("Data.Entities.User", "UpdatedByNavigation")
                        .WithMany("ModuleUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Module_ibfk_3");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Data.Entities.ModuleProgram", b =>
                {
                    b.HasOne("Data.Entities.Module", "Module")
                        .WithMany("ModulePrograms")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Module_Program_ibfk_2");

                    b.HasOne("Data.Entities.TrainingProgram", "Program")
                        .WithMany("ModulePrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Module_Program_ibfk_1");

                    b.Navigation("Module");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Data.Entities.Notification", b =>
                {
                    b.HasOne("Data.Entities.User", "CreatedByNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Notification_ibfk_1");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("Data.Entities.OtpVerify", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("Otpverifies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("OTPVerify_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.RequestReply", b =>
                {
                    b.HasOne("Data.Entities.User", "CreatedByNavigation")
                        .WithMany("RequestReplies")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Request_Reply_ibfk_1");

                    b.HasOne("Data.Entities.EmailRequest", "Request")
                        .WithMany("RequestReplies")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Request_Reply_ibfk_2");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Data.Entities.StudentClass", b =>
                {
                    b.HasOne("Data.Entities.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Student_Class_ibfk_1");

                    b.HasOne("Data.Entities.User", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Student_Class_ibfk_2");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Data.Entities.Submission", b =>
                {
                    b.HasOne("Data.Entities.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Submissions_ibfk_2");

                    b.HasOne("Data.Entities.User", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Submissions_ibfk_1");

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Data.Entities.TrainingProgram", b =>
                {
                    b.HasOne("Data.Entities.User", "CreatedByNavigation")
                        .WithMany("TrainingProgramCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Training_Program_ibfk_1");

                    b.HasOne("Data.Entities.User", "UpdatedByNavigation")
                        .WithMany("TrainingProgramUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("Training_Program_ibfk_2");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Data.Entities.Assignment", b =>
                {
                    b.Navigation("AssignmentDetails");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Data.Entities.Attendance", b =>
                {
                    b.Navigation("AttendanceDetails");
                });

            modelBuilder.Entity("Data.Entities.Class", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Attendances");

                    b.Navigation("ClassManagers");

                    b.Navigation("ClassTrainers");

                    b.Navigation("Lectures");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("Data.Entities.EmailRequest", b =>
                {
                    b.Navigation("RequestReplies");
                });

            modelBuilder.Entity("Data.Entities.Lecture", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Data.Entities.Module", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Lectures");

                    b.Navigation("ModulePrograms");
                });

            modelBuilder.Entity("Data.Entities.TrainingProgram", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Classes");

                    b.Navigation("ModulePrograms");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("AssignmentCreatedByNavigations");

                    b.Navigation("AssignmentUpdatedByNavigations");

                    b.Navigation("AttendanceDetails");

                    b.Navigation("Certificates");

                    b.Navigation("ClassManagers");

                    b.Navigation("ClassTrainers");

                    b.Navigation("DocumentCreatedByNavigations");

                    b.Navigation("DocumentUpdatedByNavigations");

                    b.Navigation("EmailRequestCreatedByNavigations");

                    b.Navigation("EmailRequestRecipients");

                    b.Navigation("LectureCreatedByNavigations");

                    b.Navigation("LectureUpdatedByNavigations");

                    b.Navigation("ModuleCreatedByNavigations");

                    b.Navigation("ModuleUpdatedByNavigations");

                    b.Navigation("Notifications");

                    b.Navigation("Otpverifies");

                    b.Navigation("RequestReplies");

                    b.Navigation("StudentClasses");

                    b.Navigation("Submissions");

                    b.Navigation("TrainingProgramCreatedByNavigations");

                    b.Navigation("TrainingProgramUpdatedByNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
